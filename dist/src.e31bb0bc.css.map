{"version":3,"sources":["app\\scss\\config\\_variables.scss","..\\node_modules\\include-media\\dist\\_include-media.scss","app\\scss\\config\\_reset.scss","app\\scss\\config\\_base.scss","app\\scss\\helpers\\_utitlties.scss","app\\scss\\layout\\_grid.scss"],"names":[],"mappings":"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","file":"src.e31bb0bc.css","sourceRoot":"..\\src","sourcesContent":[":root {\r\n    // Colors\r\n    --blue-dark-intro: hsl(217, 28%, 15%);\r\n    --blue-dark-main: hsl(218, 28%, 13%);\r\n    --blue-dark-footer: hsl(216, 53%, 9%);\r\n    --blue-dark-testimonial: hsl(219, 30%, 18%);\r\n\r\n    --cyan-accent: hsl(176, 68%, 64%);\r\n    --blue-accent: hsl(198, 60%, 50%);\r\n    --light: hsl(0, 0%, 100%);\r\n\r\n    // Fonts\r\n    --title-font: 'Raleway', sans-serif;\r\n    --body-font: 'Open Sans', sans-serif;\r\n\r\n    --title-font-size: 4rem;\r\n    --subtitle-font-size: 2.5rem;\r\n    --body-font-size: --subtitle-font-size;\r\n    --small-font-size: 2rem;\r\n    --min-font-size: 1.8rem;\r\n\r\n    @include media('>=laptop') {\r\n        --title-font-size: 3rem;\r\n        --subtitle-font-size: 1.8rem;\r\n        --body-font-size: 1.4rem;\r\n        --small-font-size: 1.2rem;\r\n        --min-font-size: 0.8rem;\r\n    }\r\n\r\n\r\n\r\n\r\n    --light-w: 400;\r\n    --bold-w: 700;\r\n\r\n    // General Size\r\n    --max-width: 120rem;\r\n\r\n    --logo-desktop-widht:  18rem;\r\n    --logo-desktop-height:  5.5rem;\r\n    --logo-mobile-widht:  16.3rem;\r\n    --logo-mobile-height:  5rem;\r\n}\r\n\r\n// Sass\r\n$blueDarkIntro: var(--blue-dark-intro);\r\n$blueDarkMain: var(--blue-dark-main);\r\n$blueDarkFooter: var(--blue-dark-footer);\r\n$blueDarkTestimonial: var(--blue-dark-testimonial);\r\n$cyanAccent: var(--cyan-accent);\r\n$blueAccent: var(--blue-accent);\r\n$light: var(--light);\r\n\r\n$titleFont: var(--title-font);\r\n$bodyFont: var(--body-font);\r\n$titleFontSize: var(--title-font-size);\r\n$subtitleFontSize: var(--subtitle-font-size);\r\n$bodyFontSize: var(--body-font-size);\r\n$smallFontSize: var(--small-font-size);\r\n$minFontSize: var(--min-font-size);\r\n$lightW: var(--light-w);\r\n$boldW: var(--bold-w);\r\n\r\n$maxWidth: var(--max-width);\r\n$logoDesktopWidht: var(--logo-desktop-widht);\r\n$logoDesktopHeight: var(--logo-desktop-height);\r\n$logoMobileWidht: var(--logo-mobile-widht);\r\n$logoMobileHeight: var(--logo-mobile-height);\r\n\r\n// Breakpoints\r\n$breakpoints: (\r\n    'mobile': 320px,\r\n    'tablet': 768px,\r\n    'laptop': 1024px,\r\n    'desktop': 1400px\r\n);","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'laptop': 1024px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      // scss-lint:disable SpaceAroundOperator\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  // scss-lint:disable SpaceAroundOperator\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","html {\r\n    box-sizing: border-box;\r\n    font-size: 62.5%;\r\n    // background-color: $dark;\r\n}\r\n\r\n*,\r\n*::after,\r\n*::before {\r\n    box-sizing: inherit;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\nbody {\r\n    font-family: $bodyFontSize;\r\n    color: $light;\r\n    font-family: $bodyFont;\r\n    font-weight: $lightW;\r\n    color: $light;\r\n    overflow-x: hidden;\r\n\r\n    &.no-scroll {\r\n        overflow: hidden;\r\n    }\r\n\r\n    @include media('>=laptop') {\r\n\r\n    }\r\n}\r\nh1, h2, h3, h4 {\r\n    font-family: $titleFont;\r\n    font-weight: $boldW;\r\n    line-height: 1.9;\r\n\r\n}\r\np {\r\n    font-family: $bodyFont;\r\n    font-weight: $lightW;\r\n    line-height: 1.5;\r\n}\r\n\r\nul {\r\n    list-style: none;\r\n    padding-left: 0;\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n}\r\n\r\na {\r\n    font-weight: $lightW;\r\n    text-decoration: none;\r\n    color: $light;\r\n    transition: all .3s ease-in-out;\r\n    cursor: pointer;\r\n\r\n    &:hover{color: $cyanAccent;}\r\n}\r\n\r\nimg {\r\n    max-width: 100%;\r\n    width: 100%;\r\n    height: auto;\r\n}\r\n",".b {\r\n    // Container\r\n    &-box {\r\n        max-width: 120rem;\r\n        margin: 0 auto;\r\n    \r\n        &--pall {\r\n            padding-top: 10rem;\r\n            padding-bottom: 10rem;\r\n            padding-left: 5.5rem;\r\n            padding-right: 5.5rem;\r\n    \r\n            @include media('>=laptop') {\r\n                padding-top: 9.6rem;\r\n                padding-bottom: 9.6rem;\r\n            }\r\n        }\r\n    \r\n        &--py {\r\n            padding-top: 10rem;\r\n            padding-bottom: 10rem;\r\n    \r\n            @include media('>=laptop') {\r\n                padding-top: 9.6rem;\r\n                padding-bottom: 9.6rem;\r\n            }\r\n        }\r\n        &--px {\r\n            padding-left: 5.5rem;\r\n            padding-right: 5.5rem;\r\n        }\r\n    \r\n        &--pt {\r\n            padding-top: 10rem;\r\n            \r\n            @include media('>=laptop') {\r\n                padding-top: 9.6rem;\r\n                \r\n            }\r\n        }\r\n        &--pb {\r\n            padding-bottom: 10rem;\r\n    \r\n            @include media('>=laptop') {\r\n                padding-bottom: 9.6rem;\r\n                \r\n            }\r\n        }\r\n        &--pl {padding-left: 5.5rem;}\r\n        &--pr {padding-right: 5.5rem;}\r\n    \r\n    }\r\n\r\n    // Text\r\n    &-tx {\r\n        // Logo text\r\n        &-logo {\r\n            // font-family: $font-logo;\r\n            // color: $white;\r\n        }\r\n\r\n        &-body {\r\n            font-size: $bodyFontSize;\r\n        }\r\n        &-sub {\r\n            font-size: $minFontSize;\r\n        }\r\n    }\r\n    &-hd {\r\n        font-size: $titleFontSize;\r\n        &1 {\r\n            margin-bottom: rfs(6rem);\r\n            \r\n        }\r\n\r\n        &2 {\r\n            margin-bottom: rfs(5rem);\r\n\r\n        }\r\n\r\n        &3 {\r\n            font-size: 1rem;\r\n            margin-bottom: rfs(1rem);\r\n        }\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\n.dark-overlay {\r\n    height: 100%;\r\n    width: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    background-color: rgba(0,0,0, .7);    \r\n}\r\n",".u {\r\n    \r\n    // Responsive Grid \r\n    &-responsiveGrid {\r\n        display: grid;\r\n        gap: 1em;\r\n        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n    }\r\n        \r\n    // Resposive Flexbox\r\n    &-responsiveFlex {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n    \r\n        & > * {\r\n            flex: 1 1 200px;\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    &-round-img {\r\n        border-radius: 50%;\r\n    }\r\n    &-center-text {\r\n        text-align: center;\r\n    }\r\n    &-line {\r\n        height: 3px;\r\n        width: 30%;\r\n        background-color: #ccc;\r\n        margin: 4rem auto;\r\n    }\r\n\r\n\r\n    // Backgrounds  \r\n    &-bg {\r\n        &--intro {\r\n            background-color: $blueDarkIntro;\r\n        }\r\n        &--main {\r\n            background-color: $blueDarkMain;\r\n        }\r\n        &--testimonial {\r\n            background-color: $blueDarkTestimonial;\r\n        }\r\n        &--footer {\r\n            background-color: $blueDarkFooter;\r\n        } \r\n    }\r\n    \r\n    // Visibility\r\n    &-none { display: none; }\r\n    &-invisible { overflow: hidden; }\r\n\r\n    &-hide-for-mobile {\r\n        // Hide for tablet and mobile\r\n        @include media('<laptop') {\r\n            display: none!important;\r\n        }\r\n    }\r\n    &-hide-for-desktop {\r\n        // Hide for desktop viewport widths\r\n        @include media('>=laptop') {\r\n            display: none!important;\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n}",".grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(12, 1fr);\r\n    gap: 1rem;\r\n  }\r\n  \r\n  @for $i from 1 through 12 {\r\n    .grid-#{$i} {\r\n      grid-column: span ($i);\r\n    }\r\n}\r\n\r\n@include media('>=mobile') {\r\n    @for $i from 1 through 12 {\r\n      .grid-mb-#{$i} {\r\n        grid-column: span ($i);\r\n      }\r\n    }\r\n}\r\n  \r\n@include media('>=tablet') {\r\n@for $i from 1 through 12 {\r\n    .grid-tb-#{$i} {\r\n    grid-column: span ($i);\r\n    }\r\n}\r\n}\r\n\r\n@include media('>=laptop') {\r\n@for $i from 1 through 12 {\r\n    .grid-lp-#{$i} {\r\n    grid-column: span ($i);\r\n    }\r\n}\r\n}\r\n\r\n@include media('>=desktop') {\r\n@for $i from 1 through 12 {\r\n    .grid-dt-#{$i} {\r\n    grid-column: span ($i);\r\n    }\r\n}\r\n}"]}